<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.2 (Python 3.12.6 on win32)" generated="2025-01-28T15:37:02.548697" rpa="false" schemaversion="5">
<suite id="s1" name="Example2" source="d:\Testing-Learning\With_Requests\example2.robot">
<test id="s1-t1" name="Validate Simple GET Request" line="8">
<kw name="GET" owner="RequestsLibrary">
<msg time="2025-01-28T15:37:03.269417" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/posts/1 
 path_url=/posts/1 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2025-01-28T15:37:03.269417" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/posts/1 
 status=200, reason=OK 
 headers={'Date': 'Tue, 28 Jan 2025 13:37:03 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1735541831&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=DhlovN2J%2B8mtudwW3Q0UHwIszVG4VBoTVIkD%2BRCGNx0%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1735541831&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=DhlovN2J%2B8mtudwW3Q0UHwIszVG4VBoTVIkD%2BRCGNx0%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1735541884', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"124-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '2040', 'Server': 'cloudflare', 'CF-RAY': '90915ffc1ea12447-AMS', 'Content-Encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400', 'server-timing': 'cfL4;desc="?proto=TCP&amp;rtt=40052&amp;min_rtt=39436&amp;rtt_var=15229&amp;sent=4&amp;recv=6&amp;lost=0&amp;retrans=0&amp;sent_bytes=2841&amp;recv_bytes=785&amp;delivery_rate=74044&amp;cwnd=251&amp;unsent_bytes=0&amp;cid=5aa4b9303ea9f645&amp;ts=67&amp;x=0"'} 
 body={
  "userId": 1,
  "id": 1,
  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
} 
 </msg>
<msg time="2025-01-28T15:37:03.284088" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>${BASE_URL}/posts/1</arg>
<doc>Sends a GET request.</doc>
<status status="PASS" start="2025-01-28T15:37:03.084910" elapsed="0.200263"/>
</kw>
<kw name="Log" owner="BuiltIn">
<arg>${response.url}</arg>
<arg>DEBUG</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-01-28T15:37:03.289436" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<msg time="2025-01-28T15:37:03.289436" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2025-01-28T15:37:03.289436" elapsed="0.000000"/>
</kw>
<kw name="Should Contain" owner="BuiltIn">
<arg>${response.json()}</arg>
<arg>userId</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" start="2025-01-28T15:37:03.289436" elapsed="0.000000"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-01-28T15:37:03.301871" level="INFO">{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'}</msg>
<arg>${response.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-01-28T15:37:03.300468" elapsed="0.001403"/>
</kw>
<status status="PASS" start="2025-01-28T15:37:03.084910" elapsed="0.216961"/>
</test>
<status status="PASS" start="2025-01-28T15:37:02.556213" elapsed="0.745658"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat name="Example2" id="s1" pass="1" fail="0" skip="0">Example2</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
